{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "951c126d-09bf-4f08-8005-9d92e4075f7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Looks like you're using an outdated `kagglehub` version (installed: 0.3.10), please consider upgrading to the latest version (0.3.12).\n",
      "Shape: (150, 6)\n",
      "Colunas: ['id', 'sepallengthcm', 'sepalwidthcm', 'petallengthcm', 'petalwidthcm', 'species']\n",
      "   id  sepallengthcm  sepalwidthcm  petallengthcm  petalwidthcm      species\n",
      "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
      "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
      "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
      "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
      "4   5            5.0           3.6            1.4           0.2  Iris-setosa\n",
      "\n",
      "Valores nulos pós‐imputação:\n",
      " id               0\n",
      "sepallengthcm    0\n",
      "sepalwidthcm     0\n",
      "petallengthcm    0\n",
      "petalwidthcm     0\n",
      "species          0\n",
      "dtype: int64\n",
      "\n",
      " Dados limpos salvos em iris_cleaned.csv\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_31773/4001395389.py:47: MatplotlibDeprecationWarning: The 'labels' parameter of boxplot() has been renamed 'tick_labels' since Matplotlib 3.9; support for the old name will be dropped in 3.11.\n",
      "  plt.boxplot(df[numeric_cols].values, labels=numeric_cols)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import kagglehub\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data_path = kagglehub.dataset_download(\"uciml/iris\")\n",
    "csv_file = next(f for f in os.listdir(data_path) if f.lower().endswith(\".csv\"))\n",
    "csv_path = os.path.join(data_path, csv_file)\n",
    "\n",
    "df = pd.read_csv(csv_path)\n",
    "\n",
    "df.columns = df.columns.str.lower()\n",
    "\n",
    "print(\"Shape:\", df.shape)\n",
    "print(\"Colunas:\", df.columns.tolist())\n",
    "print(df.head())\n",
    "\n",
    "numeric_cols = df.select_dtypes(include=[\"number\"]).columns\n",
    "cat_cols = df.select_dtypes(include=[\"object\"]).columns\n",
    "\n",
    "for col in numeric_cols:\n",
    "    if df[col].isna().any():\n",
    "        df[col] = df[col].fillna(df[col].mean())\n",
    "\n",
    "for col in cat_cols:\n",
    "    if df[col].isna().any():\n",
    "        df[col] = df[col].fillna(df[col].mode()[0])\n",
    "\n",
    "print(\"\\nValores nulos pós‐imputação:\\n\", df.isna().sum())\n",
    "\n",
    "\n",
    "def iqr_bounds(series):\n",
    "    q1, q3 = series.quantile([0.25, 0.75])\n",
    "    iqr = q3 - q1\n",
    "    return q1 - 1.5 * iqr, q3 + 1.5 * iqr\n",
    "\n",
    "for col in numeric_cols:\n",
    "    lower, upper = iqr_bounds(df[col])\n",
    "    df[col] = df[col].clip(lower, upper)\n",
    "\n",
    "clean_path = \"iris_cleaned.csv\"\n",
    "df.to_csv(clean_path, index=False)\n",
    "print(f\"\\n Dados limpos salvos em {clean_path}\")\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "plt.boxplot(df[numeric_cols].values, labels=numeric_cols)\n",
    "plt.title(\"Iris – Boxplots após capping\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50b1c434-8076-4493-b061-76c60c8e4c02",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
